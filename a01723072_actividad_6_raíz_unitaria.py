# -*- coding: utf-8 -*-
"""A01723072_Actividad 6 - Continuación de Pruebas de raíz unitaria

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qq67KKmcFqNpQmMrgWLj7-xCcP6il_bQ
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf

# Define the tickers and date range
tickers = ['GLD', 'GOOGL', 'AXP', 'JPM']  # Replaced 'GC=F' with 'GLD'
start_date = '2019-11-29'
end_date = pd.Timestamp.today().strftime('%Y-%m-%d')

# Download adjusted close prices
data = yf.download(tickers, start=start_date, end=end_date)
# Check if 'Adj Close' is present in the columns, if not, try 'Close'
if 'Adj Close' in data.columns:
    data = data['Adj Close']
else:
    # If 'Adj Close' is not present, use 'Close' instead
    data = data['Close']

# Function to perform ADF test and interpret results
def adf_test(series, title):
    print(f'\nADF Test for {title}')
    result = adfuller(series.dropna(), autolag='AIC')
    print(f'ADF Statistic: {result[0]:.4f}')
    print(f'p-value: {result[1]:.4f}')
    print('Critical Values:')
    for key, value in result[4].items():
        print(f'   {key}: {value:.4f}')
    if result[1] < 0.05:
        print('Result: Stationary (reject null hypothesis of unit root)')
    else:
        print('Result: Non-stationary (fail to reject null hypothesis of unit root)')
    return result

# Function to check stationarity and random walk
def analyze_series(series, ticker):
    # Plot original series
    plt.figure(figsize=(14, 10))
    plt.subplot(3, 1, 1)
    plt.plot(series, label=f'{ticker} Adjusted Close')
    plt.title(f'{ticker} Price Series')
    plt.legend()

    # Perform ADF test on original series
    adf_result = adf_test(series, f'{ticker} Original Series')

    # Check for random walk by differencing
    diff_series = series.diff().dropna()
    plt.subplot(3, 1, 2)
    plt.plot(diff_series, label=f'{ticker} First Difference', color='orange')
    plt.title(f'{ticker} First Difference')
    plt.legend()

    # ADF test on differenced series
    adf_test(diff_series, f'{ticker} First Difference')

    # Plot ACF to check for random walk characteristics
    plt.subplot(3, 1, 3)
    plot_acf(diff_series, ax=plt.gca(), lags=20)
    plt.title(f'ACF of {ticker} First Difference')
    plt.tight_layout()
    plt.show()

    # Interpret random walk
    if adf_result[1] > 0.05 and adfuller(diff_series.dropna())[1] < 0.05:
        print(f'{ticker}: Likely a random walk (non-stationary original series, stationary after differencing)')
    else:
        print(f'{ticker}: Not a clear random walk based on ADF tests')

# Analyze each ticker
for ticker in tickers:
    analyze_series(data[ticker], ticker)